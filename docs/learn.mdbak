# 开发教程

### 版本
2019.9.15

## 简介
本教程集合了本人在学习编程中的经验和教授他人编程中遇到的问题。
本页面不直接教授编程，主要列出一些问题和解决方法以及学习编程线路的建议。
本页面适合想要学习Minecraft开发的人员阅读，如果你并不想开发Minecraft或者并不只是想开发Minecraft，那么本页面的一些内容也许同样适合你。
注意，为了方便理解，在语言上我用了不太严谨的表示方式，具体的严谨结论请以具体官方资料为主。

## 开始开发
### 编程语言
同人与人对话一样，我们想要与计算机对话，就要学习一门计算机语言。众所周知，计算机只能识别二进制码，如果我们用二进制码与计算机对话，那一定是一场噩梦。
为了解决这个问题，就有了各种编程语言，以汇编语言为例，你可以理解为他们是用二进制码写的一个软件，然后把你能看懂的文字翻译成计算机可以看懂的二进制码，这个过程叫做编译。
事实上，很多编程语言是用另一个编程语言写的，这些称为高级语言。高级语言相比汇编语言更容易读懂，甚至可以减少很多工作量。
编程语言有很多种，在全民编程即将到来的时代，我举例几个比较常见的也比较有用的编程语言。
注意：本页面主要讲java，如果你对其他语言不感兴趣请跳过，节省时间。

#### C
C是一个老牌的高级语言，它是汇编语言到高级语言时代的产物，所以它比较“底层化”，可以编写很多底层软件如操作系统、驱动、单片机，甚至你家的电动玩具车可能就是用C写的。
C也是国家计算机考试中的一个科目，难度比较低，但是其底层的操作会让你很烦于管理内存。
C语言除了标准C以外，还有很多版本，你的C代码可能换个编译器就会疯狂报错。

#### C++
C++是C的扩展，它可能是最难学的编程语言，也是用的最广的编程语言之一。
学习C++你可能会被各种阅读性极差的代码和超多要注意的毫无规律的问题所打败。
C++除了保留了C的“底层性”以外，还引入了*面向对象*，使代码的逻辑性、条理性更强，更容易被读懂(称为阅读性)。
你现在在用的很多windows软件都是用VC++(微软魔改的C++版本)写的，可见它有多强。
同样的，它也有很多版本。

#### C# 
别再叫她“C井号”了，她的名字叫作*C Sharp*，把别人的名字叫错是很不礼貌的！
C# 是微软公司开发的一个编程语言，它吸收C和C++的特点，清除了很多繁琐的内存处理、指针操作等让无数程序员奔溃的内容，让编程语言更容易学。
如果你想要学习一门编程语言就可以做很多事，C# 非常适合你。C# 也是开发windows软件最常用的编程语言之一，唱跳rap篮球样样精通。

#### Java
想必很对人对java的第一印象就是小时候按键手机的java游戏，它陪我们度过了童年。
如今的java是一门非常强的编程语言，分出了java se,java ee,java me
它最大的特点是跨平台性，简单来说哪里有虚拟机，java就能在哪里运行。如果你想要你的程序既能在windows上运行，也能在linux上运行，甚至放到你家电冰箱中运行，那么java非常适合你。
java的用途非常广，可以说什么都能干。
如果你想开发手机程序，那java最适合你了，它是Android程序的主要编程语言(开发安卓手机app)，虽然保守的ios限制了很多java软件的运行，但未来的世界势必由安卓占领。Android的界面是用java和kotlin(可以理解为java的变种)写的。学习java，手机软件不在话下。
如果你想成为秃头程序员，安静地做一个web开发，java ee非常适合你。javaweb最常用的网站开发策略，但是它非常的难，内容极多，很多书籍为了能容纳更多的内容，删减了许多重要的知识，导致整本书看不懂，即使看懂了也不全~~(《javaweb从入门到精通》出来挨打)~~。
说到java，许多人第一个想到的游戏可能就是Minecraft，因为它太有名了。如果你想要开发Minecraft插件或模组，选java吧。
java也是许多年里编程语言学习人数排榜首的编程语言，可见它的热度。
java简单易学，安全性高，gc回收机制你能让你免去清理内存的烦恼。
**本页面主要讲的编程语言是java**

#### MatLib
数学系的学生对它应该很熟悉。没错，他是数学编程、科学计算的工具之一。
正如它的名字(MatLib，矩阵库)，它集成了超多数学运算库，不止矩阵哦。
它并不仅仅只能做运算，还能绘图表，写写windows应用程序也行哦。
如果你对数学有浓厚兴趣，MatLib挺适合你的。

#### Python
如果在未来全民编程的时代中，国家将编程列入必修课会选什么语言，我认为是Python。
作为新时代的编程语言，Python不仅做到了易学安全性高，用途还十分的广，甚至很有未来感。
Python有多容易学呢？写Python程序，会让你感觉是在写脚本。
为什么说Python很有未来感？这是因为——人工智能，这也是我认为国家会将Python列为必修课的原因之一。
现在非常多的学校的计算机课都开始学Python了，许多创客、机器人比赛也是Python主力。可见国家的号召多强。
说到爬虫，很多人第一个想到的可能就是Python。你想写一个自己的搜索引擎吗？用Python就几行代码的事。
Python还能写网站，同样简单、功能强大。

#### 易语言
用中文写代码，正版收费。这就是易语言
想想看，用中文写代码的效率，以及写出来的代码一眼看上去密密麻麻的笔画，真的很难以再看下去。所以我并不是很推荐易语言。
不过易语言也有它的特点，特别是它对于新手的友好，令他成为LSeng高中信息技术课的程序设计语言之一(虽然LSeng并没有被安排在选修易语言的班级)。
如果你想用中文写代码，可以考虑易语言。

#### Web
##### HTML
HTML全名Hyper Text Markup Language，意为超文本标记语言。
现在你看到的所有网站，都是通过解析服务器传来的HTML显示出网站界面的。
要学习编写网站，必须学习HTML。
不过HTML本身只能写一些静态的页面，要编写动态页面**(注意：动态页面并不是会动的页面，比如一个静态页面中有一张gif动图，那它依然是静态页面)**，还得用一些别的东西。
在以前，如果要根据访问者的不同返回不同的html页面，要自己编写软件输出不同的html文件去解决，而现在就不一样了。

##### JavaScript
严格来说JavaScript并不是一个动态网站编写语言，因为绝大部分js代码都在渲染静态页面。另外，你写的js代码传到用户手上的时候，用户是可以全部看到的哦。
JavaScript是学习web必学的，下面的才是选学的。
另外，学完JavaScript基本语法后，别以为就这样完了，常用JavaScript库node.js vue.js jquery ajax等都是可以写一本书的，好好学哦。

##### PHP
PHP原来叫做Personal Home Page，意为个人主页。现在叫PHP: Hypertext Preprocessor，意为超文本预处理器。
比较简单易学的动态网站方案。

#### Python
上面说过了，就不多说了。

#### JavaWeb
银行、政府网站基本都用jw，这是因为它太安全了。不过即使它安全，也不能掉以轻心，如果连注入攻击都不防的话，那你的网站会很好玩。
javaweb的难度并不比C++容易，相反它要比C++难很多，毕竟很多老旧知识被淘汰了，但都是必学知识，但你好不容易搞懂一个东西然后告诉你不要用这个东西，想必是挺崩溃的。
javaweb很多内容都是可以写一本或几本书的，千万不要买那些所谓的把所有知识集成在一本的书籍，比如Spring框架就可以写好几本书了。

#### ASP
ASP只能在windows服务器上运行，可以使用windows的cmd组件等。学习ASP的人也不多，如果你有被windows开发支配的恐惧，不建议学习。

#### 脚本语言
##### JavaScript
js除了开发网站，它也可以开发插件。因为JavaScript太有名了，学习web必学js。只要有js解析插件，你可以在任何软件、任何游戏中开发js插件。
其实，由于脚本语言是不用被编译的，那么只要是脚本语言，只要有专门的解析组件，就可以用脚本语言写插件。
比如[这个](https://github.com/caoli5288/script)，就是用js写Minecraft插件的例子

##### lua
JavaScript难？没关系，lua作为一个小巧的脚本语言，用来开发插件也挺不错哦。
比如[Cuberite](https://cuberite.org)就是一个用lua写插件的服务端(不支持java插件)
比如[开放式电脑](https://oc.cil.li/)是一个可以用lua写程序的mod

##### Skript
Skript是独属于Minecraft服务器插件开发的脚本语言，这门编程语言非常容易上手，小白也可以做插件，代码极接近自然语言没学过编程的人都能看懂，效率很高，完全不用体验被内存管理支配的恐惧。
但是，由于它不是一门真正的编程语言，它的运行离开不了Skript解析插件，本来java效率就低了(事实上，java效率非常高，但再高也没办法高于C++)，这下再加一个脚本语言解析，对于性能敏感的人来说简直噩梦。
当然，Skript肯定也不能像java那样想做什么就做什么，毕竟人家只是一门轻量级脚本语言，不能对它要求过高。
如果你只需要编辑轻量级的插件，不想学习编程，并不需要开发大型插件、大型API什么的，它绝对适合你。

### 集成开发工具
建议使用IDEA

## 学习过程中遇到的难题
### 为什么看不懂
许多人和我抱怨在学习编程的时候看不懂或听不懂内容，比较常见的有这以下几种：
#### 看到了以前没见过的词汇
举个例子：
*递归是一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算。*(来自百度百科词条“递归”)
一些人看到递归两个字，就放弃了学习，为什么？递归是什么意思啊？看不懂啊，没见过这个词啊！
**如果你是这种人，我建议你放弃学习编程。** 真不是笑话你，我建议你把时间用来做点别的，不要浪费时间在学习编程上。
如果你看到*递归*两个字后，继续看后面的定义，那么恭喜你，你是会学习的人。
真正看不懂是因为不能理解它的定义，而不是看到了没见过的词。什么是递归？后面已经告诉你了。
所以凡是有人跟我说看不懂定义，是因为看不懂给定义的词汇，而不是定义，那么我都会建议他别学了。

还有一种情况就是，确实看不懂定义。这种情况是正常的，但是别以为看不懂就放弃，也不要因为它只是定义性的东西就可以不学，特别是某些基础性的东西，定义尤其重要。
那么看懂定义的方式是什么呢？并不是把它背起来。作为一个程序员，LSeng几乎没有背过任何编程中的定义，也不能把他们背出来。
你要做的是理解，知道它在说什么，而不是背起来。在你看这段文字的同时要思考，思考它说的是什么，而不是让这段文字怎么读、发音是什么在你大脑里经过，然后消失。
以递归为例，看到这个词，从字面上我首先想到了传递和回归，那么它可能就有数据传递和回归或者说重复运行。后面的解释刚好和我想的很像。接着从定义中看看有没有和我想的不同的地方，有没有需要补充的地方，然后自然而然你就记住了它的意思，你就可以用自己的语言复述了。

除定义以外，你还可能在具体的文章中看到一些没见过的词，在文章前面并没有给出定义，在字面上你也没办法理解它的意思。
~~如果你会查询，那你还有救~~
这个时候你可以先把这个词放一边，继续往下阅读，猜测这个词的意思。也许在下文就直接或间接告诉了你这个词的意思。实在不行再去查询。是不是和学习英语很像？
以《算法导论》为例(没书也行，脑补一下现在你在看这边书)，在第二章中(想象你翻开了第二章)，出现了渐进符号Θ(想想一堆能看懂的文字中突然出现一个没见过的符号)
这是它先非形式化引进的一个符号，在第三章就系统跟你讲这个符号的用法。所以你可以大概把它理解为是一个数学符号，等你看到第三章茅塞顿开的时候再回来，你会发现本来没完全看懂的第二章现在能看懂了。
除此之外，可能还会出现一些人为引进的标记或词汇，特别是在一些API中，这些不一定是公认的，但却是合理的。就像你父母给你起名，并不需要全世界公认你才能通过这个名字。
还有一种常见情况是你跳着学，这样难免会漏一些东西，请按照书籍或教程的指示学习，不要丢三落四。

### 学习编程要学好英语吗
实际上，学习编程并不需要学好英语。编程语言常用关键字就几个，一些和英文单词原意还是不一样的。比如c++的virtual，英文原意是**现实的**(在某些大词典中会有“(计算机互联网上)虚拟”的翻译)，但在C++中却是**虚拟的**的意思。
在java中，你甚至可以用中文命名。
但是，为了阅读性，以及更方便的交流、看懂别人的源码，还是建议学好英语的。初中的词汇量以及足够应付很多种情况了，再加上一些你的领域的词汇(如MC中的forge、bukkit等)，就足够了。
如果你的梦想是计算机系，那么英语绝对要学好，因为计算机系要过英语专业八级~~(毕业之后你可以假装自己是英语系的)~~。

### 理论和实践的关系
这一点不仅在编程中，在现实中也有很大争论。
许多人认为，只有理论没有实践是不行的，也有人认为应在实践中学习理论。这是两种极端。
我觉得，只有理论很少实践应该在大学比较常见，在实践中学习理论在小学比较常见。当然我不是在贬低谁，我只是说出这两种情况在学校中的情况，至少是我自己经历的情况。
比如，医学，如果你要在实践中理论，没有足够的理论基础，你一下手可能就是一条人命。
说回编程，在实践中学习理论在墨瓷开发组是比较常见的，是墨瓷开发组推荐的学习方法。这种方法可以快速、更好的理解学习的内容，因为其身临其境的方式能带给学习者更高的学习兴趣，更快地适应开发。
但是，这种方法在我看来还是有很多弊端的。

## java中一些比较难理解的内容

## java中一般培训班不会教的内容

## 开发中应养成的习惯

## 开发过程中经常遇到的错误
### 遍历时修改容器

## 最简式到底少了多少东西

## 学完编程语言就完了吗？我还要学什么？
### 算法

## 不同线路的方向
### 独立游戏开发线路

## 
- - - - -

## 开发Minecraft服务器插件

## 开发Minecraft模组

## 开发自己的服务端

## 加入Moci开发组
### 使用MociAPI进行开发
#### Kettle等MC服务端开发
在[这里](develop.md)有详细的教程

---

以上。
编写 @LSeng.
允许墨瓷成员和玩家提供修改意见。
